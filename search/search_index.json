{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"prerequisites/","title":"Prerequisites","text":"<p>Prepare before the workshop</p> <p>To ensure a seamless workshop experience, complete the following checklist items in order.</p>"},{"location":"prerequisites/#set-up-a-github-account","title":"Set up a GitHub account","text":"<p>Login to your GitHub account.</p> <p>You may create a new GitHub account, if you do not already have one. (1)</p> <ol> <li> Clicking the button below will open the page on a new tab, for you to create a new GitHub account. Keep your <code>@handle</code> handy after you have logged in.</li> </ol> <p> Create a new GitHub account</p> <p></p>"},{"location":"prerequisites/#clone-the-workshop-project-to-your-own-account","title":"Clone the workshop project to your own account","text":"<ol> <li> Create workshop project</li> <li> <p>In the new tab, most of the prompts will automatically fill in for you and the default settings should be fine. Otherwise...</p> <ul> <li>For owner, choose your personal account or.</li> <li> <p>We recommend creating a public repository. (1)</p> <ol> <li> <p> Public repositories benefit from</p> <ul> <li>Free use of GitHub Actions minutes.</li> <li>Free use of GitHub Advanced Security features.</li> </ul> </li> </ol> </li> <li> <p>Scroll down and click the Create repository button at the bottom of the form.</p> Expand for sample view... <p></p> </li> </ul> </li> <li> <p>After creation of your new repository has begun, wait about 20 seconds, then refresh the page.</p> </li> </ol> <p></p>"},{"location":"prerequisites/#enable-discussions","title":"Enable Discussions","text":"<ol> <li>On GitHub.com, navigate to the main page of your new repository.</li> <li>Under your repository name, click  Settings.     </li> <li>Scroll down to the \"Features\" section and click Set up discussions"},{"location":"prerequisites/#configure-base-security","title":"Configure base security","text":"<ol> <li>Navigate to the  Settings tab on your new workshop repository.</li> <li> <p>Under the \"Security\" section of the menu, select  Code security and analysis. Then configure the settings to match as follows (by clicking Enable where the option is/becomes available).</p> <p>Further configurations guide...</p> <ul> <li> <p>Dependabot version updates</p> <p>When enabling, you will be prompted to edit the <code>.github/dependabot.yml</code> configuration file. Simply navigate back on your browser or click on Cancel changes to leave the prompt, and to continue the base security configuration.</p> </li> <li> <p>CodeQL analysis</p> <ol> <li>From the Set up, select the Default option.       </li> <li>Leave the default settings in the prompt that follows, and simply click on Enable CodeQL to continue.</li> </ol> </li> <li> <p>Protection rules</p> <p>Select the configuration as shown below.   </p> </li> </ul> </li> </ol> <p></p>"},{"location":"prerequisites/#register-a-github-app","title":"Register a GitHub App","text":"<ol> <li>In the upper-right corner of any page on GitHub, click your profile photo.</li> <li>Navigate to your account  Settings.</li> <li>In the left sidebar, click  Developer settings.</li> <li>In the left sidebar, click  GitHub Apps</li> <li> <p>Click New GitHub App</p> <p>Provide the form fields value as follows</p> <pre><code>GitHub App Name..........: &lt;YOUR-HANDLE&gt;-bot\n\nHomepage URL.............: https://github.com/&lt;YOUR-HANDLE&gt;/github-devsecops-fundamentals\n\nWebhook\n  Active.................: DESELECT\n\nRepository permissions\n  Actions................: Read and write\n  Administration.........: Read and write\n  Contents...............: Read and write\n  Deployments............: Read and write\n  Discussions............: Read and write\n  Environments...........: Read and write\n  Pages..................: Read and write\n\nWhere can this GitHub App be installed?\n  Any account.................: SELECT\n</code></pre> </li> <li> <p>Generate a private key for the new GitHub App as documented in  here.</p> </li> <li> <p>Save the GitHub App private key to your new repository's secrets under the name of <code>APP_PRIVATE_KEY_ACTIONS_ASSISTANT</code>.</p> <p>\ud83d\udc40 Creating secrets for a repository.</p> </li> <li> <p>Save the GitHub App's <code>appid</code> to your new repository's variables under the name of <code>APP_ID_ACTIONS_ASSISTANT</code>.</p> <p>\ud83d\udc40 Creating configuration variables for a repository</p> </li> <li> <p>Goto <code>https://github.com/apps/&lt;YOUR-HANDLE&gt;-bot</code>. Install the app in the repository you created earlier.</p> Expand for additional guide and sample views... <ol> <li></li> <li></li> <li></li> <li></li> </ol> </li> </ol> <p>What is the use of a GitHub App?</p> <p>When you use the repository's <code>GITHUB_TOKEN</code> to perform tasks, events triggered by the <code>GITHUB_TOKEN</code>, with the exception of <code>workflow_dispatch</code> and <code>repository_dispatch</code>, will not create a new workflow run. This prevents you from accidentally creating recursive workflow runs. For example, if a workflow run pushes code using the repository's <code>GITHUB_TOKEN</code>, a new workflow will not run even when the repository contains a workflow configured to run when push events occur.</p> <p>If you do want to trigger a workflow from within a workflow run, you can use a GitHub App installation access token or a personal access token instead of <code>GITHUB_TOKEN</code> to trigger events that require a token.</p> <p>If you use a GitHub App, you'll need to create a GitHub App and store the app ID and private key as secrets.</p> <p>~ Triggering a workflow from a workflow</p> <p>During the course of the workshop exercises, you will discover how the GitHub App is used to trigger the automatic deployment of release artifacts.</p> <p></p>"},{"location":"prerequisites/#create-a-project-board-for-the-repository","title":"Create a project board for the repository","text":"<ol> <li> <p>Open the recently created workshop repository.</p> </li> <li> <p>Navigate to the  Projects tab.</p> </li> <li> <p>Open the Link a project   dropdown menu . Then select the New Project option.</p> </li> <li> <p>Click on the New project   button  to start the project creation wizard.</p> </li> <li>Select the  Team backlog template.</li> <li>Give a name to the project</li> <li>Finally click on the Create button.</li> </ol> <p></p>"},{"location":"prerequisites/#provision-a-new-cloud-development-environment-for-the-workshop","title":"Provision a new cloud development environment for the workshop","text":"<p>GitHub Codespaces enables you to instantly start coding on the workshop project. Personal accounts on GitHub can benefit from a free quota of GitHub Codespaces usage.</p> <ol> <li> <p>Navigate to the  Code tab.</p> </li> <li> <p>Open the  Code  menu and click on  Create codespaces on main.</p> Expand for sample view... <p></p> </li> <li> <p>Leave the Codespace development environment to initialize and run, we will come back to use it later.</p> <p></p>"},{"location":"exercises/","title":"Introduction","text":"<p> Workshop Exercises</p> <p>The workshop exercises provide guidance for implementing DevSecOps at the fundamental level with the GitHub platform. On completion, you would have gained the exposure to enable you seamlessly implement DevSecOps capabilities such as</p> <ul> <li> Continuous collaboration</li> <li> Continuous planning</li> <li> Continuous integration</li> <li> Continuous delivery</li> <li> Continuous quality</li> <li> Continuous security</li> </ul> <p>This workshop site also serves as the product we shall target for development. And During the course of the exercises, you will discover how you can rapidly build and test the site locally, and implement standardized tests to enable automated quality checks on the site.</p>"},{"location":"exercises/#workshop-scenario","title":"Workshop Scenario","text":"<p>You are working in a team that owns this site, and a new business goal has come into the vision of your organisation. In order to grow engagement with the site...</p> <p>...the goal is to create a Tetris Game to delight our site visitors.</p> <p> Outcome: Tetris Game </p>"},{"location":"exercises/#milestones","title":"Milestones","text":"<p>The workshop objectives will be delivered by completion of the following milestones</p> <p></p> <ul> <li> <p> Collaborate</p> <p>Facilitate onboarding into the site project and enable project development at high velocity for stakeholders of different experience with the project.</p> </li> <li> <p> Secure the software supply chain</p> <p>Seamlessly implement application security and secure the software supply chain.</p> </li> <li> <p> Automate Deployment of Releases</p> <p>Reliably deliver value to the end-user at high velocity.</p> </li> </ul>"},{"location":"exercises/01.collaborate/","title":"Collaborate","text":"<p>Continuous Collaboration</p> <p>Continuous collaboration enables working together across technical and cultural boundaries as a unified team, reducing frictions and increasing the velocity to accomplish common goals.</p>"},{"location":"exercises/01.collaborate/#objectives","title":"Objectives","text":"<p>Behaviors that enable addressing the challenge include</p> <ul> <li> Facilitate tracking of business goal delivery</li> <li> Enable rapid onboarding to project development</li> <li> Provide a standardized validation of work done</li> <li> Enable collaborative validation of done requirement</li> </ul>"},{"location":"exercises/01.collaborate/01/","title":"Project Management","text":"<p> Facilitate collaborative tracking of business goal delivery</p> <p>As part of the prerequisite steps, you had created a project management board. You will now build on that step and keep stakeholders in the loop through the full course of the development process.</p> <p></p>"},{"location":"exercises/01.collaborate/01/#exercise-create-an-issue-to-capture-the-goal","title":"Exercise: Create an <code>issue</code> to capture the goal","text":"<p>What is GitHub Issues?</p> <p>Use GitHub Issues to track ideas, feedback, tasks, or bugs for work on GitHub.</p> <p>When you mention an issue in another issue or pull request, the issue's timeline reflects the cross-reference so that you can keep track of related work. To indicate that work is in progress, you can link an issue to a pull request. When the pull request merges, the linked issue automatically closes.</p>"},{"location":"exercises/01.collaborate/01/#refer-back-to-the-project-created-in-the-prerequisite-to-the-workshop","title":"Refer back to the project created in the prerequisite to the workshop","text":""},{"location":"exercises/01.collaborate/01/#create-an-issue-to-capture-the-goal","title":"Create an issue to capture the goal","text":"<ol> <li>Identify the  Backlog column</li> <li>Click on + Add item at the bottom of the column</li> <li>Click on the + button</li> <li>Select  Create new issue from the menu</li> <li>Choose the repository you created earlier</li> <li> <p>Choose Feature request (1)</p> <ol> <li> <p>The issue creation was facilitated with an \ud83d\udc40 issue template.</p> .github/ISSUE_TEMPLATE/feature_request.md<pre><code>---\nname: Feature request\nabout: Suggest an idea for this project\ntitle: ''\nlabels: ''\nassignees: ''\n\n---\n\n**Is your feature request related to a problem? Please describe.**\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n\n**Describe the solution you'd like**\nA clear and concise description of what you want to happen.\n\n**Describe alternatives you've considered**\nA clear and concise description of any alternative solutions or features you've considered.\n\n**Additional context**\nAdd any other context or screenshots about the feature request here.\n</code></pre> </li> </ol> </li> <li> <p>Fill the form. Feel free to be creative \ud83d\ude42 with your inputs.</p> <p>For the title...</p> <p>You may for instance enter \"Create a Tetris game to delight our site visitors\".</p> <p>After filling the form in, click Create  to create the issue. (1)</p> <ol> <li>Things you can do in an issue include but are not limited to<ul> <li>Assign the issue to yourself or other stakeholders.</li> <li>Mention other stakeholders (people and teams) to notify them for awareness.</li> </ul> </li> </ol> </li> </ol>"},{"location":"exercises/01.collaborate/01/#take-note-of-the-issue-number","title":"Take note of the issue number","text":"<p>We will use the issue number to link the the issue to subsequent work later. If you are too curious and cannot wait, see \ud83d\udc40 Linking a pull request to an issue.</p> <p>Moreover, having created the issue, we can update the issue with comments to keep collaborating stakeholders in the loop.</p>"},{"location":"exercises/01.collaborate/01/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Project planning for developers</li> <li>Planning and tracking work for your team or project</li> <li>Linking a pull request to an issue</li> <li>Create diagrams to convey information through charts and graphs</li> </ul>"},{"location":"exercises/01.collaborate/02/","title":"Implement Features","text":"<p> Enable rapid onboarding to project development</p> <p>Our goal is to create a Tetris Game to delight our site visitors, without losing time to complex project onboarding process nor complications due to tool-bloat.</p> <p>Currently, navigating to the Tetris Game page of the workshop site shows that the feature is currently missing. We will address that issue in this exercise.</p> <p></p> <p></p>"},{"location":"exercises/01.collaborate/02/#exercise-integrate-the-tetris-game","title":"Exercise: Integrate the Tetris Game","text":"<p>Refer back to the Codespaces development environment created in the prerequisite to the workshop.(1)</p> <ol> <li> <p> Your Codespace may have stopped due to inactivity. Do not worry, it is quite easy to get back on track...</p> <ul> <li>If the browser tab with your Codespace remains open and you can find it, click Restart codespace to resume.     </li> <li>Otherwise, you can find it at the new repository you had created.     </li> </ul> </li> </ol>"},{"location":"exercises/01.collaborate/02/#explore-your-codespace","title":"Explore your Codespace","text":""},{"location":"exercises/01.collaborate/02/#understand-your-codespace","title":"Understand Your Codespace","text":"<p><code>.devcontainer/devcontainer.json</code> describes the provisioning of your codespace. Some of the configuration entries are explained below, with annotations next to the respective entry. You can learn more about the Development Container Specification at your convenience.</p> .devcontainer/devcontainer.json<pre><code>{\n  \"hostRequirements\": {//(1)!\n    \"cpus\": 4,\n    \"memory\": \"16gb\",\n    \"storage\": \"32gb\"\n  },\n  \"build\": {\n    \"dockerfile\": \"./Dockerfile\",//(2)!\n    \"context\": \"..\"\n  },\n  \"postAttachCommand\": \"python -m mkdocs serve --clean --dev-addr 127.0.0.1:8080\",//(3)!\n  \"forwardPorts\": [\n    8080\n  ],\n  \"containerEnv\": {\n    \"TETRIS_APP_HOST\": \"127.0.0.1\",\n    \"TETRIS_APP_PORT\": \"8080\",\n    \"TETRIS_APP_PATH\": \"github-devsecops-fundamentals\"\n  },\n  ...\n</code></pre> <ol> <li>You can customize the compute resource to be made available for the Codespace environment, to suit your project.</li> <li>A <code>Dockerfile</code> can be used to customize the Codespace container image, for instance you may choose to consistently pre-install dependencies required for the development environment.</li> <li>Tasks may be configured to be executed at the start of each development session e.g. running a development server.</li> </ol> <p>On the <code>TERMINAL</code> view at the bottom, notice that a local site server is already running. This is as a result of the <code>postAttachCommand</code> configuration entry in <code>.devcontainer/devcontainer.json</code>.</p> <p>Looking at the build log in the terminal, you can see a warning like the one in the following example.(1)</p> <ol> <li>\ud83d\udca1 The warning gives a cue to addressing the Tetris Game integration issue. We shall implement the fix in later steps!</li> </ol> <p></p> <p> The log <code>INFO</code> entry that reads <code>INFO    -  [05:36:30] Watching paths for changes: 'docs', 'mkdocs.yml'</code> informs you that thelocal site will rebuild whenever there is a change in the <code>docs</code> folder.</p>"},{"location":"exercises/01.collaborate/02/#enable-quick-collaboration-feedback","title":"Enable Quick Collaboration Feedback","text":"<p>Switch to the <code>PORTS</code> view on the bottom panel, notice there is a <code>Site (8080)</code> entry in the table.</p> <ol> <li>Focus your  mouse pointer on the <code>Site (8080)</code> to reveal additional contexts.</li> <li> <p>Click the  Preview in Editor icon to browse the local build of the site inside of the editor's browser.(1)</p> <ol> <li> <ul> <li> Only you currently have access to the published site.</li> </ul> </li> <li> You may instead click the  icon associated with <code>Site (8080)</code> entry to view the site in your normal browser.</li> </ol> </li> </ol> <p>Open access to other stakeholders for collaboration.</p> <ol> <li>Right click on the <code>Site (8080)</code> entry</li> <li>In the popup menu, set the mouse pointer on the Port Visibility item and select the Public option.     </li> </ol> <p> Now, other stakeholders you share the site URL with can access the site. Consequently, they can also assess your ongoing work and can collaborate with timely feedbacks.</p>"},{"location":"exercises/01.collaborate/02/#implement-automated-checks","title":"Implement Automated Checks","text":"<p>GitHub as a platform, is event-driven. Beyond the ordinary, you can generally automate your actual business processes by modelling activities to produce changes on GitHub, thus triggering execution of certain automated tasks depending on the nature of a change. If you already familiar with the concept of GitOps, think of how the idea can be extended beyond the scopes of provisioning infrastructure and implementing continuos deployment.</p> <p>At this fundamentals phase of introduction to DevSecOps, we shall focus our leverage of GitHub's powerful event system to drive  continuous integration  checks and tests with GitHub Workflows.</p>"},{"location":"exercises/01.collaborate/02/#learn-github-actions","title":"Learn GitHub Actions","text":"<p>What is GitHub Actions?</p> <p>GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline. You can create workflows that build and test every pull request to your repository, or deploy merged pull requests to production.</p> <p>GitHub Actions goes beyond just DevOps and lets you run workflows when other events happen in your repository. For example, you can run a workflow to automatically add the appropriate labels whenever someone creates a new issue in your repository.</p> <p>GitHub provides Linux, Windows, and macOS virtual machines to run your workflows, or you can host your own self-hosted runners in your own data center or cloud infrastructure.</p> <p>~ Understanding GitHub Actions</p> Anatomy of a GitHub Workflow<pre><code>name: Learn GitHub Actions #(1)!\n\nrun-name: ${{ github.actor }}  is learning GitHub Actions #(2)!\n\non: [push] #(3)!\n\npermissions: #(12)!\n    contents: read\n\nenv: #(13)!\n    LEARNER_NAME: Igwe\n\njobs: #(4)!\n\n    check-bats-version: #(5)!\n\n        runs-on: ubuntu-latest #(6)!\n\n        steps: #(7)!\n\n            - uses: actions/checkout@v4 #(8)!\n\n            - uses: actions/setup-node@v3 #(9)!\n              with:\n                  node-version: '14'\n\n            - run: npm install -g bats #(10)!\n\n            - run: bats -v #(11)!\n\n            - run: echo \"Hey ${LEARNER_NAME}, you're good... You've mastered GitHub Actions\\!\"\n</code></pre> <ol> <li><code>Optional</code> - The name of the workflow as it will appear in the \"Actions\" tab of the GitHub repository. If this field is omitted, the name of the workflow file will be used instead.</li> <li><code>Optional</code> - The name for workflow runs generated from the workflow, which will appear in the list of workflow runs on your repository's \"Actions\" tab. This example uses an expression with the <code>github</code> context to display the username of the actor that triggered the workflow run. For more information, see \"Workflow syntax for GitHub Actions.\"</li> <li>Specifies the trigger for this workflow. This example uses the <code>push</code> event, so a workflow run is triggered every time someone pushes a change to the repository or merges a pull request.  This is triggered by a push to every branch; for examples of syntax that runs only on pushes to specific branches, paths, or tags, see \"Workflow syntax for GitHub Actions\" and  \"Events that trigger workflows\" .</li> <li>Groups together all the jobs that run in the <code>learn-github-actions</code> workflow.</li> <li>Defines a job named <code>check-bats-version</code>. The child keys will define properties of the job.</li> <li>Configures the job to run on the latest version of an Ubuntu Linux runner. This means that the job will execute on a fresh virtual machine hosted by GitHub. For syntax examples using other runners, see \"Workflow syntax for GitHub Actions\"</li> <li>Groups together all the steps that run in the <code>check-bats-version</code> job. Each item nested under this section is a separate action or shell script.</li> <li> <p>The <code>uses</code> keyword specifies that this step will run <code>v4</code> of the <code>actions/checkout</code> action. This is an action that checks out your repository onto the runner, allowing you to run scripts or other actions against your code (such as build and test tools). You should use the checkout action any time your workflow will use the repository's code.</p> <p>Actions are the building blocks that power your workflow. A workflow can contain actions created by the community, or you can create your own actions directly within your application's repository.</p> <p>To learn more, see:</p> <ul> <li>Finding and customizing actions</li> <li>About custom actions</li> </ul> </li> <li> <p>This step uses the <code>actions/setup-node@v3</code> action to install the specified version of the Node.js. (This example uses version 14.) This puts both the <code>node</code> and <code>npm</code> commands in your <code>PATH</code>.</p> </li> <li>The <code>run</code> keyword tells the job to execute a command on the runner. In this case, you are using <code>npm</code> to install the <code>bats</code> software testing package.</li> <li>Finally, you'll run the <code>bats</code> command with a parameter that outputs the software version.</li> <li> <p>At the start of each workflow job, GitHub automatically creates a unique <code>GITHUB_TOKEN</code> secret to use in your workflow. You can use the <code>GITHUB_TOKEN</code> to authenticate in the workflow job.</p> <p>When you enable GitHub Actions, GitHub installs a GitHub App on your repository. The <code>GITHUB_TOKEN</code> secret is a GitHub App installation access token. You can use the installation access token to authenticate on behalf of the GitHub App installed on your repository. The token's permissions are limited to the repository that contains your workflow.</p> <p>You can modify the permissions for the <code>GITHUB_TOKEN</code> in individual workflow files. If the default permissions for the <code>GITHUB_TOKEN</code> are restrictive, you may have to elevate the permissions to allow some actions and commands to run successfully. If the default permissions are permissive, you can edit the workflow file to remove some permissions from the <code>GITHUB_TOKEN</code>. As a good security practice, you should grant the <code>GITHUB_TOKEN</code> the least required access.</p> <p>Learn more about the default Permissions for the <code>GITHUB_TOKEN</code>.</p> </li> <li> <p>This defines a <code>map</code> of variables that are available to the steps of all jobs in the workflow. You can also set variables that are only available to the steps of a single job or to a single step. Learn more at Defining environment variables for a single workflow.</p> </li> </ol>"},{"location":"exercises/01.collaborate/02/#implement-automated-pull-request-checks","title":"Implement Automated Pull Request Checks","text":"<p>What is a Pull Request (also known as PR)?</p> <p>Pull requests let you tell others about changes you've pushed to a branch in a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before your changes are merged into the base branch.</p> <p>~ About pull requests</p> <p>To enable quality checks in the project at high velocity, implement a workflow that standardizes automated checks as follows.</p> .github/workflows/continuous.integration.yml<pre><code>name: Run Checks on PR\n\non:\n  pull_request:\n    branches:\n      - main\n\npermissions:\n  actions: write\n  checks: write\n  contents: read\n  security-events: write\n  pull-requests: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n  TETRIS_APP_HOST: \"127.0.0.1\"\n  TETRIS_APP_PORT: \"8080\"\n  TETRIS_APP_PATH: \"github-devsecops-fundamentals\"\n\njobs:\n  quality-checks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.12\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n\n      - name: Install Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.ci.txt\n          npm ci\n          # Install browsers for running functional tests\n          npx playwright install --with-deps chromium\n\n      - name: Build\n        run: |\n          python -m mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n\n      - name: Functional Test\n        run: npx playwright test\n\n      - name: Upload Functional Test Report\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-report\n          path: playwright-report/\n          retention-days: 30\n</code></pre>"},{"location":"exercises/01.collaborate/02/#analysis","title":"Analysis","text":"<ul> <li> <p>Lines <code>3 - 6</code></p> <p>The workflow will be triggered when a pull request is created targeting the <code>main</code> branch. Additional, changes to a pull request will cause the workflow to rerun.</p> </li> <li> <p>Lines <code>43 - 45</code></p> <p>First check: The site is built with the <code>--strict</code> option, such that the occurrence of any <code>WARNING</code> results in a failed check. As it is, we can expect the automated checks to flag the pull request as non-compliant at this step.</p> </li> <li> <p>Lines <code>47 - 48</code></p> <p>Second check: Provided the build step had been successful, this next step tests the correctness of the feature implementation in accordance to customer-value expectations. So far, we should not get to this point in the workflow run as the <code>Build</code> should have failed because the Tetris game feature implementation has not been completed.</p> </li> </ul> <code>DEPRECATED EXERCISE STEP</code> Optionally Implement Merge Queue for GitHub Enterprise <p>What is a Merge Queue?</p> <p>A merge queue helps increase velocity by automating pull request merges into a busy branch and ensuring the branch is never broken by incompatible changes.</p> <p>The merge queue provides the same benefits as the Require branches to be up to date before merging branch protection, but does not require a pull request author to update their pull request branch and wait for status checks to finish before trying to merge.</p> <p>Using a merge queue is particularly useful on branches that have a relatively high number of pull requests merging each day from many different users.</p> <p>Once a pull request has passed all required branch protection checks, a user with write access to the repository can add the pull request to the queue. The merge queue will ensure the pull request's changes pass all required status checks when applied to the latest version of the target branch and any pull requests already in the queue.</p> <p>\ud83d\udcda Learn more...</p> <ul> <li>Managing a merge queue</li> <li>Merging a pull request with a merge queue</li> </ul> <p>The previously implemented pull request checks will be executed in isolation. However, to provide assurance of stability on the target branch as different changes are being introduced to it at a fast pace by multiple collaborators, we want to aggregate isolated changes and re-validate them in batches i.e. the Merge Queue.</p> <p>Is this like a Daily Build?</p> <p>You probably recognize this concept as similar to the implementation of a daily/nightly build. Except you do not have to wait ~ 24 hours or there about to validate your project's quality status.</p> <p> Configure Merge Queue</p> <p>A Merge Queue is ideal for rolling out continuous integration at scale, enabling larger projects and teams to be optimally productive -- delivering high quality value without compromising product stability.</p> <p>You can reserve execution of expensive checks in a merge queue, to save cost and time.</p> <p>To effectively leverage Merge Queue, you must first configure your repository to require it for pull requests as follows.</p> <ol> <li>On GitHub.com, navigate to the main page of the repository you have created.</li> <li>Under your repository name, click  Settings. If you cannot see the \"Settings\" tab, select the  dropdown menu, then click Settings.     </li> <li>In the \"Code and automation\" section of the sidebar, click  Branches.</li> <li>Next to \"Branch protection rules\", click Add branch protection rule.</li> <li>Under \"Branch name pattern\", type the branch name <code>main</code> for the branch you want to protect.</li> <li>Select Require merge queue.</li> <li>Click Create to complete Merge Queue configuration</li> </ol> <p>Finally implement the checks in merge queue as follows.</p> .github/workflows/continuous.integration.merge.queue.yml<pre><code>name: Run Checks on Merge Queue\n\non:\n  merge_group:\n    types: [checks_requested]\n\npermissions:\n  actions: write\n  checks: write\n  contents: read\n  security-events: write\n  pull-requests: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n  TETRIS_APP_HOST: \"127.0.0.1\"\n  TETRIS_APP_PORT: \"8080\"\n  TETRIS_APP_PATH: \"github-devsecops-fundamentals\"\n\njobs:\n  run-acceptance:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.12\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n\n      - name: Install Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.ci.txt\n          npm ci\n          # Install browsers for running functional tests\n          npx playwright install --with-deps chromium\n\n      - name: Build\n        run: |\n          python -m mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n\n      - name: Functional Test\n        run: npx playwright test\n\n      - name: Upload Functional Test Report\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-report\n          path: playwright-report/\n          retention-days: 30\n</code></pre>"},{"location":"exercises/01.collaborate/02/#publish-your-changes","title":"Publish your changes","text":"<p>You can link your changes to an issue</p> <p>Recall the issue you created earlier and its respective issue number, you will use it to link your current changes to the issue.</p> <ol> <li> <p>Commit and push the changes.</p> <pre><code>git checkout -b feature/tetris-game\ngit add .\ngit commit -m \"$(printf 'Create a tetris game to drive site engagement\\n\\n- Implement continuous integration\\n\\n- Resolves #&lt;ISSUE-NUMBER&gt;')\"\ngit push -u origin feature/tetris-game\n</code></pre> </li> <li> <p>Create a pull request by clicking on the GitHub icon in the sidebar menu, and then clicking the Create Pull Request icon.</p> <ol> <li> <p></p> </li> <li> <p></p> </li> </ol> <p>Check that the local branch and repository you're merging from, and the remote branch and repository you're merging into, are correct. You may leave the pre-filled pull request title and description as they are.</p> <p></p> <p>Click \"Create\", and if prompted then click \"Always\" or \"Publish Branch\".</p> </li> <li> <p>The pull request you created will be listed at <code>https://github.com/&lt;YOUR-HANDLE&gt;/github-devsecops-fundamentals/pulls</code>.</p> <p>Opening the pull request for exploration you should observe the following</p> <ul> <li> <p> Conversation</p> <p>Particularly enables and summarizes discussions/reviews on your changes with other collaborators and stakeholders. And additionally summarizes outcome of checks on the pull request.     -  Commits</p> <p>Summarizes all the commits contributing to the pull request.</p> </li> <li> <p> Checks</p> <p>Lists the checks run on the pull request and their respective outcomes.</p> </li> <li> <p> Files changed</p> <p>Shows a <code>diff</code> of files modified and added due to the pull request.</p> </li> </ul> <p></p> <p>Note</p> <p>Observe the 3 executed checks.</p> <ul> <li>1 failure due to error in site build.</li> <li>2 code scanning check passes.</li> </ul> </li> </ol>"},{"location":"exercises/01.collaborate/02/#implement-feature-changes","title":"Implement Feature Changes","text":"<p>The <code>Build</code> step in the previously implemented automated checks should identify a failure ultimately pointing to incompletion of the expected Tetris game feature. In the current phase, we will take steps to integrate the Tetris game as follows.</p> <ol> <li>Rename the <code>docs/.tetris.game</code> folder to <code>docs/tetris.game</code>, i.e. simply remove the <code>.</code> prefix from the name.</li> <li> <p>Find and open the file <code>mkdocs.yml</code> in the File Explorer (it's at the root of the file tree)</p> </li> <li> <p>Confirm that the <code>Tetris Game</code> relevant entry points to an index file in the <code>tetris.game</code> folder</p> <pre><code> nav:\n   - Home: index.md\n   - Prerequisites: prerequisites.md\n   - Exercises:\n       - Introduction: exercises/index.md\n       - Collaborate:\n           - exercises/01.collaborate/index.md\n           - exercises/01.collaborate/01.md\n           - exercises/01.collaborate/02.md\n       - Secure the Software Supply Chain:\n           - exercises/02.secure.the.software.supply.chain/index.md\n           - exercises/02.secure.the.software.supply.chain/01.md\n           - exercises/02.secure.the.software.supply.chain/02.md\n       - Automate Release:\n           - exercises/03.automate.release/index.md\n           - exercises/03.automate.release/01.md\n           - exercises/03.automate.release/02.md\n       - \u2728 Recap:\n           - exercises/recap/index.md\n   - Tetris Game: tetris.game/index.html\n</code></pre> </li> </ol>"},{"location":"exercises/01.collaborate/02/#manual-test","title":"Manual Test","text":"<ol> <li>Observe the local build in the terminal, there should not be any  <code>WARNING</code> in the log.</li> <li>Manually confirm that the Tetris Game integration was effective.    </li> </ol>"},{"location":"exercises/01.collaborate/02/#automated-test","title":"Automated Test","text":"<p>Before publishing our new changes, we will implement and execute a functional test to validate the feature implementation.</p> <ol> <li> <p>Open the terminal and install test dependencies.(1)</p> <ol> <li>\ud83d\udca1 You can create additional terminal session by clicking  at the top right side of the <code>TERMINAL</code> panel.</li> </ol> <pre><code># Install Node.js\nnvm install --lts #(1)!\n# Install packages required for running the functional UI test\nnpm install\n# Install the browser(s) against which the functional UI test should run\nnpx playwright install --with-deps chromium #(2)!\n</code></pre> <ol> <li> A codespace environment can be customized as needed. In this case, we customized the running session by installing the latest version of <code>Node.js</code>.</li> <li> This command installs browsers required for the functional test. Please be patient, it may take 1 to 2 minutes to complete the installation.</li> </ol> <p>Then implement the functional test as follows.</p> tests/tetris.spec.js<pre><code>import { test, expect } from \"@playwright/test\";\n\ntest(\"Tetris Game\", async ({ page }) =&gt; {\n  const { TETRIS_APP_HOST, TETRIS_APP_PORT, TETRIS_APP_PATH } = process.env;\n\n  // should be similar to http://127.0.0.1:8080/github-devsecops-fundamentals/\n  console.log(\n    `http://${TETRIS_APP_HOST}:${TETRIS_APP_PORT}/${TETRIS_APP_PATH}`\n  );\n  await page.goto(\n    `http://${TETRIS_APP_HOST}:${TETRIS_APP_PORT}/${TETRIS_APP_PATH}`\n  );\n\n  await page.getByRole(\"link\", { name: \"Tetris Game\" }).click();\n  await expect(page.getByText(\"score 00000\")).toBeVisible();\n  await expect(page.getByText(\"rows 0\")).toBeVisible();\n  await expect(page.locator(\"#upcoming\")).toBeVisible();\n  await expect(\n    page.getByRole(\"link\", { name: \"Press Space to Play.\" })\n  ).toBeVisible();\n\n  await page.getByRole(\"link\", { name: \"Press Space to Play.\" }).click();\n  await expect(page.getByText(\"score 00000\")).not.toBeVisible({\n    timeout: 0.5 * 60 * 1000,\n  });\n});\n</code></pre> <p>Finally execute the automated test.</p> <pre><code>npx playwright test\n</code></pre> <p>When everything has been done right, the test should pass. </p> </li> <li> <p>Commit the changes to the current <code>feature/tetris-game</code> branch and publish it for a review.</p> <p>You can link your changes to an issue</p> <p>Recall the issue you created earlier and its respective issue number, you will use it to link your current changes to the issue.</p> <pre><code>git add .\ngit commit -m \"$(printf 'Create a tetris game to drive site engagement\\n\\n-Integrate Tetris game implementation\\n\\n- Resolves #&lt;ISSUE-NUMBER&gt;')\"\ngit push origin\n</code></pre> <p>Observe that all checks have passed.</p> <p></p> </li> </ol>"},{"location":"exercises/01.collaborate/02/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Creating a GitHub Pages site</li> <li>Introduction to dev containers</li> <li>Workflow syntax for GitHub Actions</li> <li>Events that trigger workflows</li> <li>Finding and customizing actions</li> <li>Code scanning</li> <li>Security hardening for GitHub Actions</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/","title":"Secure the Software Supply Chain","text":"<p>Continuous Delivery and Secure Supply Chain</p> <p>Supply chain security is integral to continuous delivery. With the accelerated use of open source, most projects depend on hundreds of open-source dependencies. This poses a security problem: what if the dependencies you're using are vulnerable? You could be putting your users at risk of a supply chain attack. One of the most important things you can do to protect your supply chain is to patch your vulnerable dependencies and replace any malware.</p> <p>Building on the progress from previous exercises, we will apply supply chain security and continuously deliver the product by fulfilling the following objectives.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/#objectives","title":"Objectives","text":"<ul> <li> Create Integration Checks for the <code>Tetris</code> app using GitHub Actions.</li> <li> Create a Continuous Delivery workflow for the <code>Tetris</code> app using GitHub Actions.</li> <li> Create a new release <code>tag</code> for the <code>Tetris</code> app using GitHub Actions.</li> <li> Create a Compliance using CodeQL, Dependency Review, and Dependabot.</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/01/","title":"Dependency Review","text":"<p> Add Security Checks</p> <p>Dependency review helps you understand dependency changes and the security impact of these changes at every pull request. It provides an easily understandable visualization of dependency changes with a rich diff on the \"Files Changed\" tab of a pull request. Dependency review informs you of:</p> <ul> <li>Which dependencies were added, removed, or updated, along with the release dates.</li> <li>How many projects use these components.</li> <li>Vulnerability data for these dependencies.</li> </ul> <p></p>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#exercise-automate-enforcement-of-dependency-review","title":"Exercise: Automate Enforcement of Dependency Review","text":""},{"location":"exercises/02.secure.the.software.supply.chain/01/#understand-the-dependency-review-configurations","title":"Understand the Dependency Review Configurations","text":".github/dependency-review-config.yml<pre><code>fail-on-severity: moderate #(1)!\n\ncomment-summary-in-pr: always #(2)!\n\nallow-licenses: #(3)!\n  - MIT\n  - GPL-3.0\n  - BSD-3-Clause\n\ndeny-licenses: #(4)!\n  - LGPL-2.0\n  - BSD-2-Clause\n\nallow-ghsas: #(5)!\n  - GHSA-abcd-1234-5679\n  - GHSA-efgh-1234-5679\n\nfail-on-scopes: #(6)!\n  - development\n  - runtime\n  - unknown\n</code></pre> <ol> <li>Possible values: \"critical\", \"high\", \"moderate\", \"low\"</li> <li>Post summary as a comment to respective pull request</li> <li>Only allow the listed licenses (optional). Possible values: Any <code>spdx_id</code> value(s) from https://docs.github.com/en/rest/licenses</li> <li> <p>Block the pull request on these licenses (optional). Possible values: Any  <code>spdx_id</code> value(s) from https://docs.github.com/en/rest/licenses</p> <p> You can only include one of either of these two options: <code>allow-licenses</code> and <code>deny-licenses</code>.</p> </li> <li> <p>Skip these GitHub Advisory Database IDs during detection (optional). Possible values: Any valid GitHub Advisory Database ID from https://github.com/advisories</p> </li> <li>Block pull requests that introduce vulnerabilities in the scopes that match this list (optional). Possible values: \"development\", \"runtime\", \"unknown\"</li> </ol>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#implement-dependency-review-check","title":"Implement Dependency Review Check","text":"<p>Open the <code>.github/workflows/continuous.integration.yml</code> file in the editor and add the  highlighted  content as follows:</p> .github/workflows/continuous.integration.yml<pre><code>name: Run Checks on PR\n\non:\n  pull_request:\n    branches:\n      - main\n\npermissions:\n  actions: write\n  checks: write\n  contents: read\n  security-events: write\n  pull-requests: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n  TETRIS_APP_HOST: \"127.0.0.1\"\n  TETRIS_APP_PORT: \"8080\"\n  TETRIS_APP_PATH: \"github-devsecops-fundamentals\"\n\njobs:\n  quality-checks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.12\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n\n      - name: Install Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.ci.txt\n          npm ci\n          # Install browsers for running functional tests\n          npx playwright install --with-deps chromium\n\n      - name: Build\n        run: |\n          python -m mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n\n      - name: Functional Test\n        run: npx playwright test\n\n      - name: Upload Functional Test Report\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-report\n          path: playwright-report/\n          retention-days: 30\n\n  security-checks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Dependency Review\n        uses: actions/dependency-review-action@v3\n        with:\n          config-file: &gt;-\n            ./.github/dependency-review-config.yml\n</code></pre>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#commit-and-publish-your-changes","title":"Commit and publish your changes","text":"<p>Pushing your changes will apply the check on the existing pull request.</p> <p>You can link your changes to an issue</p> <p>Recall the issue you created earlier and its respective issue number, you will use it to link your current changes to the issue.</p> <pre><code>git add .\ngit commit -m \"$(printf 'Create a tetris game to drive site engagement\\n\\n-Add dependency review as a security check\\n\\n- Resolves #&lt;ISSUE-NUMBER&gt;')\"\ngit push origin feature/tetris-game\n</code></pre> <p>When you navigate to the repository on GitHub and open the existing pull request, you can confirm that the check was executed. As there are no compliance violations currently in the PR, the check is successful.</p> <p></p> <p>Homework</p> <p>Can you attempt to make the dependency review check to fail?</p>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Understanding your software supply chain</li> <li>GitHub Advanced Security - Dependency Graph</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/02/","title":"Versioning","text":"<p> Motivation for Versions</p> <p>A pull request represents a single aggregation of multiple significant changes (i.e. commits). When collaborating at scale in a large team or project, pull requests targeting the default (production) branch can be further buffered through a merge queue for further validation. In either cases, it is imperative to keep track of the aggregated changes introduced into the default branch which serves as the basic source of production releases.</p> <p>Some versions may eventually be released whereas others are not. Moreover, a released version may be rolled back to an earlier release as business decisions evolve.</p> <p></p>"},{"location":"exercises/02.secure.the.software.supply.chain/02/#exercise-version-changes-added-to-the-main-branch","title":"Exercise: Version Changes Added to the Main Branch","text":"<p>Semantic Versioning, <code>semver</code> is a scheme that conveys meaning about the underlying code and what has been modified from one version to the next.</p> <p><code>semver</code> version <code>2.0.0</code> is officially summarized as follows.</p> <p>Given a version number MAJOR.MINOR.PATCH, increment the:</p> <ol> <li>MAJOR version when you make incompatible API changes</li> <li>MINOR version when you add functionality in a backward compatible manner</li> <li>PATCH version when you make backward compatible bug fixes</li> </ol> <p>Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.</p> <p>At this fundamentals phase of DevSecOps implementation, we will apply the <code>semver</code> scheme and automate patch increment. There are conventions that can be adopted to equally automate increment in <code>MAJOR</code> and <code>MINOR</code> versions, but for simplicity our intended implementation assumes the understanding that <code>MAJOR</code> and <code>MINOR</code> version bumps will be manually initiated.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/02/#implement-patch-versioning","title":"Implement <code>PATCH</code> Versioning","text":"<p>In the file explorer, create a new workflow <code>.github/workflows/continuous.versioning.yml</code> as follows.</p> .github/workflows/continuous.versioning.yml<pre><code>name: Version Changes to the Main Branch\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch: {}\n\njobs:\n  version-main-branch-changes:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/create-github-app-token@v1\n        id: generate-app-token\n        with:\n          app-id: ${{ vars.APP_ID_ACTIONS_ASSISTANT }}\n          private-key: ${{ secrets.APP_PRIVATE_KEY_ACTIONS_ASSISTANT }}\n\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ steps.generate-app-token.outputs.token }}\n\n      - name: Get last version number\n        id: get_last_version\n        run: |\n          # Retrieve the last git tag, as we will only be processing one delivery line.\n          last_version=$(git describe --tags --abbrev=0 2&gt;/dev/null || echo \"0.0.0\")\n          echo \"Last version is $last_version\"\n          echo \"last_version=$last_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n\n      - name: Get new version number\n        id: get_new_version\n        run: |\n          major=$(echo $last_version | cut -d. -f1)\n          minor=$(echo $last_version | cut -d. -f2)\n          patch=$(echo $last_version | cut -d. -f3)\n\n          new_patch=$((patch+1))\n\n          new_version=\"$major.$minor.$new_patch\"\n\n          echo \"New version is $new_version\"\n          echo \"new_version=$new_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n        env:\n          last_version: ${{ steps.get_last_version.outputs.last_version }}\n\n      - name: Create tag for the new version\n        run: |\n          git config --global user.name \"${GITHUB_ACTOR}\"\n          git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n\n          if git tag -a \"$new_version\" -m \"Version $new_version\"; then\n            git push --follow-tags origin \"$new_version\"\n          else\n            echo \"Failed to create tag $new_version, it probably already exists\"\n          fi\n        env:\n          new_version: ${{ steps.get_new_version.outputs.new_version }}-release\n</code></pre>"},{"location":"exercises/02.secure.the.software.supply.chain/02/#analysis","title":"Analysis","text":"<ul> <li> <p>Lines <code>4 - 6</code></p> <p>We are introduced to a new event that encapsulates the activity of pushing to particular branches, specifically the <code>main</code> branch alone in this implementation.</p> </li> <li> <p>Lines <code>13 - 17</code></p> <p>A GitHub App will be used as the actor for the operations we shall be executing. Hence the <code>actions/create-github-app-token@v1</code> action is used here to generate an authorization token for the app.</p> <p>What is a GitHub App?</p> <p>GitHub Apps, much like <code>service accounts</code> and <code>bots</code>, are tools that extend GitHub's functionality. You can build a GitHub App to provide flexibility and reduce friction in your processes,  without needing to sign in a user or create a service account . GitHub Apps can do things on GitHub like open issues, comment on pull requests, and manage projects. They can also do things outside of GitHub based on events that happen on GitHub. For example, a GitHub App can post on Slack when an issue is opened on GitHub.</p> <p>The GitHub App actor will later be used to checkout the repository's source code and to push tags.</p> </li> <li> <p>Lines <code>25 - 31</code></p> <p>The step <code>Get last version number</code> computes the last version and writes it to the step output named <code>last_version</code>.</p> </li> <li> <p>Lines <code>33 - 47</code></p> <p>The step <code>Get new version number</code> uses reads the output from the previous step by the expression <code>${{ steps.get_last_version.outputs.last_version }}</code>, and use it to compute the patch increment.</p> </li> <li> <p>Lines <code>49 - 60</code></p> <p>The step <code>Create tag for the new version</code> creates a new <code>git</code> tag for release. A tag identifies specific points in a repository\u2019s history as being important. Here, the tag is being used to mark a release point.</p> <p>Because a persisted app token exists and will be used in the tag push, we can be confident that the push will effectively trigger other relevant automation. On the other hand, if the default <code>GITHUB_TOKEN</code> was used it would not trigger a workflow as  GitHub Actions rightly guard against unintentional recursive triggering of workflows .</p> </li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/02/#commit-and-publish-your-changes","title":"Commit and publish your changes","text":"<p>You can link your changes to an issue</p> <p>Recall the issue you created earlier and its respective issue number, you will use it to link your current changes to the issue.</p> <pre><code>git add .\ngit commit -m \"$(printf 'Create a tetris game to drive site engagement\\n\\n-Implement automatic patch versioning\\n\\n- Resolves #&lt;ISSUE-NUMBER&gt;')\"\ngit push origin feature/tetris-game\n</code></pre>"},{"location":"exercises/02.secure.the.software.supply.chain/02/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Semantic Versioning 2.0.0</li> </ul>"},{"location":"exercises/03.automate.release/","title":"Automate Deployment of Releases","text":"<p>Continuous Deployment</p> <p>Continuous deployment (CD) is the practice of using automation to publish and deploy software updates. As part of the typical CD process, the code is automatically built and tested before deployment.</p> <p>Continuous deployment is often coupled with continuous integration which we have seen earlier. Building on the progress from previous exercises, we will apply continuous deployment mindset by fulfilling the following objectives.</p>"},{"location":"exercises/03.automate.release/#objectives","title":"Objectives","text":"<ul> <li> Validate releases</li> <li> Execute production deployments on successful validation of respective releases</li> </ul>"},{"location":"exercises/03.automate.release/01/","title":"Release Version","text":"<p> Release</p> <p>As streams of changes make it into the production branch and are versioned in batches, an essential part of continuous delivery/deployment is to produce artifacts from versions which can then be deployed to various targets.</p> <p>Releases are deployable software iterations you can package and make available for a wider audience to download and use.</p> <p>How do we determine when to create a release? Let's see...</p> <p></p>"},{"location":"exercises/03.automate.release/01/#exercise-create-a-release-of-versions","title":"Exercise: Create a Release of Versions","text":"<p>As you can guess already, GitHub provides an event that encapsulates the activity of creating a tag and pushing it to a repository. We will automate addressing such events, so that we can create a release when necessary.</p>"},{"location":"exercises/03.automate.release/01/#implement-release-creation","title":"Implement Release Creation","text":"<p>In the file explorer, create a new workflow <code>.github/workflows/continuous.delivery.yml</code> as follows.</p> .github/workflows/continuous.delivery.yml<pre><code>name: Package Delivery Artifacts &amp; Create Release\n\non:\n  push:\n    tags:\n      - \"*-release\"\n\npermissions:\n  contents: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n\njobs:\n  package-delivery:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.12\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Build Site\n        run: |\n          python -m mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n      - name: Archive Site\n        run: |\n          zip -r ${{ env.SITE_DIR }}.zip ${{ env.SITE_DIR }}\n      - run: |\n          echo \"Site directory ${{ env.SITE_DIR }} content:\"\n          ls -al ${{ env.SITE_DIR }}\n\n      - uses: actions/create-github-app-token@v1\n        id: generate-app-token\n        with:\n          app-id: ${{ vars.APP_ID_ACTIONS_ASSISTANT }}\n          private-key: ${{ secrets.APP_PRIVATE_KEY_ACTIONS_ASSISTANT }}\n\n      - name: Draft release\n        uses: actions/github-script@v6\n        id: draft-release\n        with:\n          github-token: ${{ steps.generate-app-token.outputs.token }}\n          script: |\n\n            const response = await github.request(\n              'POST /repos/{owner}/{repo}/releases',\n              {\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                draft: true,\n                tag_name: '${{ github.ref }}',\n                discussion_category_name: 'announcements',\n                generate_release_notes: true,\n                make_latest: 'legacy',\n                headers: {\n                  'X-GitHub-Api-Version': '2022-11-28'\n                }\n              }\n            );\n\n            console.dir(response);\n\n            return response.data.id;\n\n      - name: Upload release asset\n        run: |\n          curl -L \\\n            -X POST \\\n            -H \"Accept: application/vnd.github+json\" \\\n            -H \"Authorization: Bearer ${{ steps.generate-app-token.outputs.token }}\" \\\n            -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n            -H \"Content-Type: application/octet-stream\" \\\n            \"https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.draft-release.outputs.result }}/assets?name=${{ env.SITE_DIR }}.zip\" \\\n            --data-binary \"@${{ env.SITE_DIR }}.zip\"\n\n      - name: Publish release\n        uses: actions/github-script@v6\n        id: publish-release\n        with:\n          github-token: ${{ steps.generate-app-token.outputs.token }}\n          script: |\n\n            const response = await github.request(\n              'PATCH /repos/{owner}/{repo}/releases/{release_id}',\n              {\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                release_id: ${{ steps.draft-release.outputs.result }},\n                draft: false,\n                discussion_category_name: 'announcements',\n                make_latest: 'true',\n                headers: {\n                  'X-GitHub-Api-Version': '2022-11-28'\n                }\n              }\n            );\n\n            console.dir(response);\n</code></pre>"},{"location":"exercises/03.automate.release/01/#analysis","title":"Analysis","text":"<ul> <li> <p>Lines <code>3 - 6</code></p> <p>The release creation workflow will be triggered by tag pushes and when the pushed tag version is suffixed with the <code>-release</code> metadata.</p> </li> <li> <p>Lines <code>29 - 34</code></p> <p>In the two steps included here, the site is built and archived as a release artifact.</p> </li> <li> <p>Lines <code>39 - 43</code></p> <p>A GitHub App will be used as the actor for the operations we shall be executing. Hence the <code>actions/create-github-app-token@v1</code> action is used here to generate an authorization token for the app.</p> <p>What is a GitHub App?</p> <p>GitHub Apps, much like <code>service accounts</code> and <code>bots</code>, are tools that extend GitHub's functionality. You can build a GitHub App to provide flexibility and reduce friction in your processes,  without needing to sign in a user or create a service account . GitHub Apps can do things on GitHub like open issues, comment on pull requests, and manage projects. They can also do things outside of GitHub based on events that happen on GitHub. For example, a GitHub App can post on Slack when an issue is opened on GitHub.</p> <p>When you use the repository's <code>GITHUB_TOKEN</code> to perform tasks, events triggered by the <code>GITHUB_TOKEN</code>, with the exception of workflow_dispatch and repository_dispatch, will not create a new workflow run. This prevents you from accidentally creating recursive workflow runs. For example, if a workflow run pushes code using the repository's <code>GITHUB_TOKEN</code>, a new workflow will not run even when the repository contains a workflow configured to run when push events occur.</p> <p>~ Using the GITHUB_TOKEN in a workflow</p> <p>So, we are authorizing operations as a GitHub App to enable the execution of the operation to further trigger other workflow flow runs, possibly.</p> </li> <li> <p>Lines <code>45 - 70</code></p> <p>A <code>draft</code> release is created by the respective step, allowing for modification of the release before publishing it. The release references the tag that had triggered the workflow.</p> </li> <li> <p>Lines <code>72 - 81</code></p> <p>This step leverages GitHub's ReST API to adjust the previously created draft release, specifically adding the archive created in the <code>Archive Site</code> step to the release as an asset.</p> </li> <li> <p>Lines <code>83 - 105</code></p> <p>Having drafted the release and attached deployable assets to it, the <code>Publish release</code> step ultimately publishes the release by flipping the state of it <code>draft</code> attribute to <code>false</code>.</p> </li> </ul>"},{"location":"exercises/03.automate.release/01/#commit-and-publish-your-changes","title":"Commit and publish your changes","text":"<p>You can link your changes to an issue</p> <p>Recall the issue you created earlier and its respective issue number, you will use it to link your current changes to the issue.</p> <pre><code>git add .\ngit commit -m \"$(printf 'Create a tetris game to drive site engagement\\n\\n-Implement release automation\\n\\n- Resolves #&lt;ISSUE-NUMBER&gt;')\"\ngit push origin feature/tetris-game\n</code></pre>"},{"location":"exercises/03.automate.release/01/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>GitHub Apps documentation</li> <li>GitHub REST API documentation</li> <li>GitHub Packages</li> </ul>"},{"location":"exercises/03.automate.release/02/","title":"Continuous Deployment","text":"<p> Deliver high quality value at speed</p> <p>Continuous deployment (CD) is the practice of using automation to publish and deploy software updates.</p> <p>To ultimately fulfill our goal on complete development of the feature, we altogether apply the practice of continuous deployment to validate and ship the value to our customers at high velocity.</p> <p></p>"},{"location":"exercises/03.automate.release/02/#exercise-automate-deployment-of-releases","title":"Exercise: Automate Deployment of Releases","text":"<p>The previous exercise walked us through automating the publication of release. We will continue to build upon that milestone to automate deployment of published releases.</p>"},{"location":"exercises/03.automate.release/02/#implement-deployment-workflow","title":"Implement Deployment Workflow","text":"<p>In the file explorer, create a new workflow <code>.github/workflows/continuous.deployment.yml</code> as follows.</p> .github/workflows/continuous.deployment.yml<pre><code>name: Deploy Release\n\non:\n  release:\n    types:\n      - released\n\nconcurrency:\n  group: github-pages\n  cancel-in-progress: false\n\npermissions:\n  contents: write\n  deployments: write\n  pages: write\n  id-token: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    steps:\n      - uses: actions/create-github-app-token@v1\n        id: generate-app-token\n        with:\n          app-id: ${{ vars.APP_ID_ACTIONS_ASSISTANT }}\n          private-key: ${{ secrets.APP_PRIVATE_KEY_ACTIONS_ASSISTANT }}\n\n      - name: Setup Pages\n        uses: actions/configure-pages@v3\n        with:\n          enablement: \"true\"\n          token: \"${{ steps.generate-app-token.outputs.token }}\"\n\n      - name: Download release asset\n        id: download-release-asset\n        run: |\n          cat &lt;&lt; 'EOF' &gt; event.json\n          ${{ toJson(github.event) }}\n          EOF\n          asset_id=$(cat event.json | jq '.release.assets[] | select(.name == \"${{ env.SITE_DIR }}.zip\") | .id')\n\n          curl --location --output '${{ env.SITE_DIR }}.zip'                          \\\n            -H \"Accept: application/octet-stream\"                                     \\\n            -H \"Authorization: Bearer ${{ steps.generate-app-token.outputs.token }}\"  \\\n            -H \"X-GitHub-Api-Version: 2022-11-28\"                                     \\\n            \"https://api.github.com/repos/${{ github.repository }}/releases/assets/${asset_id}\"\n\n          unzip -o \"${{ env.SITE_DIR }}.zip\" -d .\n\n          echo '##### Debug'\n          ls -al \"${{ env.SITE_DIR }}\"\n\n      - name: Fix site file permissions\n        run: |\n          chmod -c -R +rX \"${{ env.SITE_DIR }}/\" | while read line; do\n            echo \"::warning title=Invalid file permissions automatically fixed::$line\"\n          done\n\n      - name: Upload Pages artifact\n        uses: actions/upload-pages-artifact@v2\n        with:\n          path: \"${{ env.SITE_DIR }}\"\n          retention-days: \"2\"\n\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v2\n        with:\n          token: ${{ steps.generate-app-token.outputs.token }}\n</code></pre>"},{"location":"exercises/03.automate.release/02/#analysis","title":"Analysis","text":"<ul> <li> <p>Lines <code>3 - 6</code></p> <p>Deployments will be triggered in the event of a release publication.</p> </li> <li> <p>Lines <code>8 - 10</code></p> <p>Ensure that only a single job or workflow using the same concurrency group will run at a time.</p> <p>When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress, the queued job or workflow will be pending. Any previously pending job or workflow in the concurrency group will be canceled. If you do not wish to also cancel any currently running job or workflow in the same concurrency group, specify <code>cancel-in-progress: false</code>.</p> </li> <li> <p>Lines <code>25 - 27</code></p> <p>This will cause the URL of the deployed site to be displayed where the workflow is executed.</p> </li> <li> <p>Lines <code>36 - 40</code></p> <p>This step enables GitHub Pages and extracts various metadata about a site. It can also be used to configure various static site generators we support as starter workflows.</p> </li> <li> <p>Lines <code>42 - 65</code></p> <p>Download assets associated with the release publication that triggered this workflow, and where necessary, adjust permissions for the files in the assets.</p> </li> <li> <p>Lines <code>67 - 71</code></p> <p>Upload the site artifacts to the storage location where it should be ultimately collected by the next step for deployment.</p> </li> <li> <p>Lines <code>73 - 77</code></p> <p>This step deploys the site.</p> </li> </ul>"},{"location":"exercises/03.automate.release/02/#commit-and-publish-your-changes","title":"Commit and publish your changes","text":"<p>You can link your changes to an issue</p> <p>Recall the issue you created earlier and its respective issue number, you will use it to link your current changes to the issue.</p> <pre><code>git add .\ngit commit -m \"$(printf 'Create a tetris game to drive site engagement\\n\\n-Implement continuous deployment\\n\\n- Resolves #&lt;ISSUE-NUMBER&gt;')\"\ngit push origin feature/tetris-game\n</code></pre>"},{"location":"exercises/03.automate.release/02/#merge-your-open-pull-request","title":"Merge your open pull request","text":"<ul> <li> <p>On the pull request page, open the drop-down from the Merge pull request  button to choose the Rebase and merge option.</p> </li> <li> <p>Then press the Rebase and merge  button to merge your pull request.</p> <p></p> </li> <li> <p>Finally, press Confirm rebase and merge.</p> </li> </ul> <p>When you merge the open pull request, you should make the following observations.</p> <p>Collaboration</p> <ul> <li> <p>The linked issue in your project board automatically gets closed and moved to the \u2705 Done column of the board.</p> <p></p> </li> </ul> <p>Automation</p> <p>When you head over to the  Actions tab on your repository, and notice...</p> <ul> <li>The <code>Version Changes to the Main Branch</code> workflow is executed.</li> <li> <p>The <code>Package Delivery Artifacts &amp; Create Release</code> workflow is executed.</p> <p>Consequently the release is announced in  Discussions. </p> </li> <li> <p>The <code>Deploy Release</code> workflow is executed.</p> <p>And on successful completion of the workflow, the public URL to your site is displayed on the job.</p> <p></p> </li> </ul> <p>Stakeholder Enablement</p> <p>Stakeholders can easily explore deployments of the project.</p> <ul> <li> <p>Deployments summary on repository home.</p> <p></p> </li> <li> <p>Detailed deployment environments list.</p> <p></p> </li> </ul>"},{"location":"exercises/03.automate.release/02/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Using environments for deployment</li> <li>Creating custom deployment protection rules</li> <li>Security harden deployments with OpenID Connect</li> </ul>"},{"location":"exercises/recap/","title":"Review of Workshop Outcomes","text":"<p>So far, we have reached the following milestones, learning to</p> <ul> <li> Track work on GitHub</li> <li> Rapidly onboard onto an existing project</li> <li> Work in a collaborative manner, and enable quick incorporation of feedbacks</li> <li> Efficiently secure the software supply chain, catching vulnerabilities and non-compliant dependencies as they are introduced</li> <li> Automate versioning</li> <li> Automate releases</li> <li> Implement continuous deployment</li> </ul>"}]}