name: Image Build, Push and Deploy to Dev

# TODO: discuss this with the team

on:
  workflow_dispatch: {}

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}:${{ github.sha }}
  AZURE_WEBAPP_NAME: azure-vote-front # TODO: Set to your application name for azure webapp service
  CLUSTER_RESOURCE_GROUP: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  DEV_NAMESPACE: ${{ secrets.DEV_NAMESPACE }}
  AKS_SECRET: avf-secret

permissions:
  contents: read
  packages: write

jobs:
  build-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Integration Tests
        run: |
          docker run -d --name redis redis
          docker run --link redis:redis $IMAGE_NAME python -m unittest discover

      - name: Lowercase the repo name
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-push
    environment:
      name: Staging
      url: http://${{steps.load_balancer_IP.outputs.external_ip}}
    outputs:
      aks_external_ip: ${{ env.aks_external_ip }}
    steps:
      - uses: actions/checkout@main

      - name: downcase REPO
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      # Set the target Azure Kubernetes Service (AKS) cluster.
      - uses: azure/aks-set-context@v1
        with:
          creds: "${{ secrets.AZURE_SERVICE_PROVIDER_CREDENTIALS }}"
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.DEV_NAMESPACE }} --dry-run=client -o json | kubectl apply -f -

      # Create image pull secret for GHCR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
          container-registry-username: ${{ github.actor }}
          container-registry-password: ${{ secrets.GITHUB_TOKEN }}
          secret-name: ${{ env.AKS_SECRET }}
          namespace: ${{ env.DEV_NAMESPACE }}

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            manifests/k8s.yml
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}
          imagepullsecrets: |
            ${{ env.AKS_SECRET }}
          namespace: ${{ env.DEV_NAMESPACE }}

      # Use kubectl to get load balancer external IP
      - name: Get and Set Load Balancer Public IP
        id: load_balancer_IP
        run: |
          IPAddress=$(kubectl get svc azure-vote-front  -n ${{ env.DEV_NAMESPACE }} \
              -o jsonpath="{.status.loadBalancer.ingress[*].ip}")
          echo $IPAddress
          echo '::set-output name=external_ip::'"$IPAddress"''
          echo "aks_external_ip=$IPAddress" >> $GITHUB_ENV

      - run: echo ${{steps.load_balancer_IP.outputs.external_ip}}
